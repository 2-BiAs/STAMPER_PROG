clear
clc
//Include these functions
//exec('DrawTool.sci');
//exec('IntersectionPoint.sci');
//exec('GratingProfileToolComp.sci');
//exec('MoveAroundOutsideCorners.sci');
//exec('SplitRadCompFromTip.sci');
//exec('OffsetNormalToPath.sci');
exec('ExtendVector.sci');
exec('GetUnitNormal.sci');


mPoints = csvRead("POINTS_16001_160409.csv", ";");
mPoints(:,1) = -mPoints(:,1);

fDepthsOfCutFacet = [-0.085 .050]; //Depth of cut values starting at last pass and working back. The last value, fDepthsOfCut($), will repeat if max(iPassCounts) > length(fDepthsOfCut)
fDepthsOfCutWall = [-0.085 .020];
fZ_Clearance = .075;

//Trim Start and End
mEndPoint = mPoints($,:);
mPoints = mPoints(5:$-1, :);

pGrooveProfile = scf();
axGrooveProfile = gca();

plot(axGrooveProfile, mPoints(:,1)', mPoints(:,2)', 'r--');
plot(axGrooveProfile, [0; mPoints($,1)], [0; 0], 'k--')
plot(axGrooveProfile, [0; mPoints($,1)], [fZ_Clearance; fZ_Clearance], 'g--')

axGrooveProfile.isoview = "on"
axGrooveProfile.axes_reverse = ["off" "on" "off"];
axGrooveProfile.x_label.text = "$X \tt(mm)$"
axGrooveProfile.y_label.text = "$Z \tt(mm)$"
axGrooveProfile.title.text = "$\tt \huge{Groove \ Profile \ and \ Toolpath}$"

iGrooveCount = 10 // (size(mPoints, 1) - 1) / 2;

for i=1:iGrooveCount
    iGroovePassCount = 1;
    bPassesComplete = %F;
    vOffsetPointBuffer = mPoints(i * 2 - 1: i * 2 + 1, :);
    iStepToLastPass = 0;
    
    vWall = [mPoints(i * 2 - 1, 1) - mPoints(i * 2, 1), mPoints(i * 2 - 1, 2) - mPoints(i * 2, 2)];
    vFacet = [mPoints(i * 2 + 1, 1) - mPoints(i * 2, 1), mPoints(i * 2 + 1, 2) - mPoints(i * 2, 2)];
    
    vWallNorm = GetUnitNormal([mPoints(i * 2 - 1,:); mPoints(i * 2,:)]);
    vFacetNorm = GetUnitNormal([mPoints(i * 2,:); mPoints(i * 2 + 1,:)]);
    
    while ~bPassesComplete
        
        fW_DoC = fDepthsOfCutWall(min(iGroovePassCount, length(fDepthsOfCutWall)));
        vWallOffset = fW_DoC * vWallNorm;
        
        fF_DoC = fDepthsOfCutFacet(min(iGroovePassCount, length(fDepthsOfCutFacet)));
        vFacetOffset = fF_DoC * vFacetNorm;
                
        vOffsetVector = vWallOffset * (vFacet / norm(vFacet))' * (vFacet / norm(vFacet)) + vFacetOffset * (vWall / norm(vWall))' * (vWall / norm(vWall));
                
        vOffsetValley = vOffsetPointBuffer((iGroovePassCount + iStepToLastPass) * 3 - 1, :) + vOffsetVector;
        vOffsetValleyExt = ExtendVector([vOffsetPointBuffer((iGroovePassCount + iStepToLastPass) * 3 - 1, :); vOffsetValley], [0,fZ_Clearance; 1, fZ_Clearance]);
        
        //plot([vOffsetPointBuffer((iGroovePassCount + iStepToLastPass) * 2, 1); vOffsetValley(1)], [vOffsetPointBuffer((iGroovePassCount + iStepToLastPass) * 2, 2); vOffsetValley(2)]);
        //plot(vOffsetValleyExt(:, 1), vOffsetValleyExt(:, 2));
        
        vOffsetValleyExt = [vOffsetValleyExt(2, 1) - vOffsetValleyExt(1, 1), vOffsetValleyExt(2, 2) - vOffsetValleyExt(1, 2)];
        
        bExtIsShorter = sqrt(vOffsetValleyExt * vOffsetValleyExt') <= sqrt(vOffsetVector * vOffsetVector');
        
//        if ~vOffsetVector * vOffsetValleyExt' < 0 | fDepthsOfCutFacet(min(iGroovePassCount, length(fDepthsOfCutFacet))) <= 0 | bExtIsShorter then  //Test to see if offset valley point is passed boundary

        if ~bExtIsShorter then

            vOffsetPointBuffer(iGroovePassCount * 3 - 2: iGroovePassCount * 3, 1:2)...
            = vOffsetPointBuffer((iGroovePassCount + iStepToLastPass) * 3 - 2: (iGroovePassCount + iStepToLastPass) * 3, 1:2)...
            + [vOffsetVector; vOffsetVector; vOffsetVector];
            
//            plot(vOffsetPointBuffer(iGroovePassCount * 3 - 2: iGroovePassCount * 3, 1),...
//            vOffsetPointBuffer(iGroovePassCount * 3 - 2: iGroovePassCount * 3, 2));
            iGroovePassCount = iGroovePassCount + 1;
            iStepToLastPass = -1;
        else
            Groove(i).OffsetArray = vOffsetPointBuffer;
            Groove(i).Count = iGroovePassCount - 1;
            bPassesComplete = %T
        end
        
    end
end

//vToolPathBuffer;
//Reorder Groove Points
iTotalGroovePassCount = 0;
for j = max(Groove(:).Count):-1:1
    iGroovesOnJ = 0;
    for i = 1:iGrooveCount
        if Groove(i).Count >= j then
            iGroovesOnJ = iGroovesOnJ + 1;
            iTotalGroovePassCount = iTotalGroovePassCount + 1;
            vToolPathBuffer($ + 1: $ + 3, 1:2) = Groove(i).OffsetArray(j * 3 - 2: j * 3, :);
            if i == 1 then  //On First Groove 
                fStartOffset = 0;
                for k = 1:j
                    if k <= length(fDepthsOfCutFacet) then
                        fStartOffset = fStartOffset + fDepthsOfCutFacet(k);
                    else
                        fStartOffset = fStartOffset + fDepthsOfCutFacet($);
                    end
                end
                printf("%f\n", fStartOffset)
                if fStartOffset < fZ_Clearance then
                    vToolPathBuffer($+2,1:2) = vToolPathBuffer($,1:2)
                    vToolPathBuffer($-2:-1: $ - 3, 1:2) = ExtendVector(vToolPathBuffer($ - 3:-1: $ - 4, 1:2), [0, fStartOffset; -1, fStartOffset]); 
                    vToolPathBuffer($ - 3, 1:2) = [0, fStartOffset];
                    plot(vToolPathBuffer($:-1: $ - 3, 1), vToolPathBuffer($: -1: $ - 3, 2), 'g-O');
                else
                    vToolPathBuffer($ - 1: -1: $ - 2, 1:2) = ExtendVector(vToolPathBuffer($ - 1:-1: $ - 2, 1:2), [0, fZ_Clearance; -1, fZ_Clearance]); 
                end
            elseif i == iGrooveCount then //On Last Groove
                vToolPathBuffer($ - 1: $, 1:2) = ExtendVector(vToolPathBuffer($ - 1 : $, 1:2), [0, fZ_Clearance; -1, fZ_Clearance]);
                vA = ExtendVector(vToolPathBuffer($ - 1:-1: $ - 2, 1:2), [0, fZ_Clearance; -1, fZ_Clearance]);
                if size(vToolPathBuffer, 1) > 3 & iGroovesOnJ > 1 then //If not the first groove in prog
                    vB = ExtendVector(vToolPathBuffer($ - 1:-1: $ - 2, 1:2), vToolPathBuffer($ - 4: $ - 3, 1:2));
                    
                    
                    if norm([vA(2, 1) - vA(1, 1), vA(2, 2) - vA(1, 2)]) < norm([vB(2, 1) - vB(1, 1), vB(2, 2) - vB(1, 2)]) then //| [vA(2, 1) - vA(1, 1), vA(2,2) - vA(1, 2)] * [0, -1]' > 0 then

                        vToolPathBuffer($ - 1:-1: $ - 2, 1:2) = vA;
                        plot(vToolPathBuffer($ - 1:-1: $ - 2, 1), vToolPathBuffer($ - 1:-1: $ - 2, 2), 'r-O');
                        
                        vToolPathBuffer($ - 4: $ - 3, 1:2) = ExtendVector(vToolPathBuffer($ - 4: $ - 3, 1:2), [0, fZ_Clearance; -1, fZ_Clearance]);
                        
                    else
//                        vToolPathBuffer($ - 2:-1: $ - 3, 1:2) = vB;
//                        vToolPathBuffer($ - 1, 1:2) = vToolPathBuffer($, 1:2);
//                        vToolPathBuffer($, 1:2) = [,];
                    end
                else
                    vToolPathBuffer($ - 1:-1: $ - 2, 1:2) = vA;
                end
            else //On Grooves in Between
                vA = ExtendVector(vToolPathBuffer($ - 1:-1: $ - 2, 1:2), [0, fZ_Clearance; -1, fZ_Clearance]);
                if size(vToolPathBuffer, 1) > 3 & iGroovesOnJ > 1 then //If not the first groove in prog
                    vB = ExtendVector(vToolPathBuffer($ - 1:-1: $ - 2, 1:2), vToolPathBuffer($ - 4: $ - 3, 1:2));
                    
                    
                    if norm([vA(2, 1) - vA(1, 1), vA(2, 2) - vA(1, 2)]) < norm([vB(2, 1) - vB(1, 1), vB(2, 2) - vB(1, 2)]) then //| [vA(2, 1) - vA(1, 1), vA(2,2) - vA(1, 2)] * [0, -1]' > 0 then

                        vToolPathBuffer($ - 1:-1: $ - 2, 1:2) = vA;
                        plot(vToolPathBuffer($ - 1:-1: $ - 2, 1), vToolPathBuffer($ - 1:-1: $ - 2, 2), 'r-O');
                        
                        vToolPathBuffer($ - 4: $ - 3, 1:2) = ExtendVector(vToolPathBuffer($ - 4: $ - 3, 1:2), [0, fZ_Clearance; -1, fZ_Clearance]);
                        
                    else
//                        vToolPathBuffer($ - 2:-1: $ - 3, 1:2) = vB;
//                        vToolPathBuffer($ - 1, 1:2) = vToolPathBuffer($, 1:2);
//                        vToolPathBuffer($, 1:2) = [,];
                    end
                else
                    vToolPathBuffer($ - 1:-1: $ - 2, 1:2) = vA;
                end
            end
        end
    end
end

xpoly(vToolPathBuffer(:, 1), vToolPathBuffer(:, 2)) //, 'm-.');
p=get("hdl");
p.polyline_style=4;
