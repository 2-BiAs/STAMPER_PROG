clear

//Load Raw Points from File
vPoints = csvRead("POINTS_16001_160409.csv", ";");  //Load Point file
vPoints(:,1) = -vPoints(:,1);  //Flip Point X-values to correspond with cutting on the left side of SPDT machine (CCW rotation)
vPoints = vPoints($:-1:1,:);  //Reverse the order of the points
//exec('PlotSurface.sce');

//Load Included Functions///////////
exec('GetToolRegime.sci');
exec('IntersectionPoint.sci');
exec('PolylineIntersectionPairs.sci');
exec('Same.sci');
exec('PolylineIntersection.sci');
exec('Intersect.sci');
exec('SuperPlot.sci');
exec('OffsetPolyline.sci');
exec('SlicePolyline.sci');
exec('JoinPolylines.sci');
exec('MathHelper.sci');
exec('BuildOffsetMatrix.sci');
exec('SlicePolylines.sci');
exec('OffsetPolylines.sci');
exec('AddInsideRad.sci');
exec('FlattenPolylineList.sci');
exec('ExtendEndPointsToZ.sci');
exec('AngleReversal.sci');
exec('MultiOffsetToBoundary.sci');
exec('BuildG_Code.sci');
exec('MergePolylineList.sci');
exec('IROffsetPolyline.sci');
exec('CompMultiOffsetToBnd.sci');
exec('NCompMultiOffsetToBnd.sci');

clc



//Define Tool Parameters/////////////////////////////////////////////////////
fToolRad = [.116, .05];   //[roughing finish]
fToolAngle = d2r([-85, -85]);   //[roughing finish]
fToolVector = [cos(fToolAngle(1)) sin(fToolAngle(1))];

//Define Tool Offset Regimes //////////////////////////////////////////////
//vORBM = [%pi / 6, %pi / 2; %pi / 2, %pi] + fToolAngle(1); //Tool Regime angular boundary matrix
//mCutterCompOffsetComponents = [[fToolRad(1), 0], [fToolRad(1) * fToolVector];...   //offset .5 in the dirrection normal to the contact line and .5 along the tool vector
//                         [0, 0], [0, 0]];   //offset nothing for point tangency
//                         
vORBM = [0, %pi] + fToolAngle(1); //Tool Regime angular boundary matrix
mCutterCompOffsetComponents = [[fToolRad(1), 0], [0 0]];
   

//Define Normal Offset Regimes////////////////////////////////////////////
 vNormalOffsetRegime = [0, %pi];
mNiUndersizeOffsetComponents = [[-.085, 0], [0, 0]];

//Define DoC Offset Regimes ////////////////////////////////////////////
vStartFix = [.51 - fToolAngle(1), .53 - fToolAngle(1)];
listMultiPassOffsetRegimes = list([%pi / 6, %pi / 2; %pi / 2, vStartFix(1); vStartFix; vStartFix(2), %pi] + fToolAngle(1)); //Tool Regime angular boundary matrix
listMultiPassOffsetRegimes(2) = listMultiPassOffsetRegimes(1);
listMultiPassOffsetRegimes(3) = listMultiPassOffsetRegimes(1);

listMultiPassOffsetComponents = list([[0.00 0], [0, 0]; [0.000, 0], [0, 0]; [0.000 0], [0, 0]; [0.000, 0], [0, 0]]);
listMultiPassOffsetComponents($+1) = [[0.005 0], [0, 0]; [0.005, 0], [0, 0]; [0.0050 0], [0, 0]; [0.005, 0], [0, 0]];
listMultiPassOffsetComponents($+1) = [[0.010 0], [0, 0]; [0.010, 0], [0, 0]; [0.010 0], [0, 0]; [0.010, 0], [0, 0]];
listMultiPassOffsetComponents($+1) = [[0.020 0], [0, 0]; [0.020, 0], [0, 0]; [0.020 0], [0, 0]; [0.020, 0], [0, 0]];

//listMultiPassOffsetComponents = list([[0.005 0], [0, 0]; [0.005, 0], [0, 0]; [0.005 0], [0, 0]; [0.005, 0], [0, 0]]);
//listMultiPassOffsetComponents($+1) = [[0.0100 0], [0, 0]; [0.005, 0], [0, 0]; [0.0100 0], [0, 0]; [0.005, 0], [0, 0]];
//listMultiPassOffsetComponents($+1) = [[0.10 0], [0, 0]; [0.005, 0], [0, 0]; [0.10 0], [0, 0]; [0.005, 0], [0, 0]];
//
